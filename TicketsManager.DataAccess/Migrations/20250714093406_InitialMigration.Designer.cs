// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketsManager.DataAccess.TicketsManagerDBContext;

#nullable disable

namespace TicketsManager.DataAccess.Migrations
{
    [DbContext(typeof(TicketsManagerDbContext))]
    [Migration("20250714093406_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetAllocationEntity", b =>
                {
                    b.Property<Guid>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AllocationId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId")
                        .IsUnique()
                        .HasFilter("[SubCategoryId] IS NOT NULL");

                    b.ToTable("BudgetAllocations");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetEntity", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("BudgetTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BudgetId");

                    b.HasIndex("BudgetTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetTemplateEntity", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("BudgetTemplates");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.CategoryEntity", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("BudgetTemplateId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.ExpenseEntity", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("SpentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.SubCategoryEntity", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SubCategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUsername")
                        .IsUnique();

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetAllocationEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.BudgetEntity", "Budget")
                        .WithMany("BudgetAllocations")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketsManager.Common.Entity.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketsManager.Common.Entity.SubCategoryEntity", "SubCategory")
                        .WithOne()
                        .HasForeignKey("TicketsManager.Common.Entity.BudgetAllocationEntity", "SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.BudgetTemplateEntity", "BudgetTemplate")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketsManager.Common.Entity.UserEntity", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetTemplateEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.UserEntity", "User")
                        .WithMany("BudgetTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.CategoryEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.BudgetTemplateEntity", "BudgetTemplate")
                        .WithMany("Categories")
                        .HasForeignKey("BudgetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetTemplate");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.ExpenseEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.BudgetEntity", "Budget")
                        .WithMany("BudgetExpenses")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketsManager.Common.Entity.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketsManager.Common.Entity.SubCategoryEntity", "SubCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketsManager.Common.Entity.UserEntity", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.SubCategoryEntity", b =>
                {
                    b.HasOne("TicketsManager.Common.Entity.CategoryEntity", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetEntity", b =>
                {
                    b.Navigation("BudgetAllocations");

                    b.Navigation("BudgetExpenses");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.BudgetTemplateEntity", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.CategoryEntity", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.SubCategoryEntity", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("TicketsManager.Common.Entity.UserEntity", b =>
                {
                    b.Navigation("BudgetTemplates");

                    b.Navigation("Budgets");

                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
